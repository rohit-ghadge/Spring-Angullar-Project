package com.app.pojos;

import java.util.ArrayList;
import java.util.List;

import javax.persistence.*;

import com.fasterxml.jackson.annotation.JsonIgnore;

@Entity
public class UserPojo extends AbstractEntity {
	private String name;
	private String email;
	private String mobile;
	private EUserRole role;
	private LocationPojo userloc;
	private Integer otp;
	@JsonIgnore
	private List<BookingPojo> userbook = new ArrayList<BookingPojo>();
	
	public UserPojo() {
		System.out.println("in userpojo ctor");
	}

	
	public UserPojo(String name, String email, String mobile, EUserRole role, LocationPojo userloc, Integer otp) {
		super();
		this.name = name;
		this.email = email;
		this.mobile = mobile;
		this.role = role;
		this.userloc = userloc;
		this.otp = otp;
	}

	@Enumerated(EnumType.STRING)
	public EUserRole getRole() {
		return role;
	}
	
	public void setRole(EUserRole role) {
		this.role = role;
	}

	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	@Column(unique = true, nullable = false)
	public String getEmail() {
		return email;
	}

	public void setEmail(String email) {
		this.email = email;
	}

	@Column(unique = true, nullable = false)
	public String getMobile() {
		return mobile;
	}

	public void setMobile(String mobile) {
		this.mobile = mobile;
	}

	@Embedded
	public LocationPojo getUserloc() {
		return userloc;
	}

	public void setUserloc(LocationPojo userloc) {
		this.userloc = userloc;
	}
	
	public Integer getOtp() {
		return otp;
	}

	public void setOtp(Integer otp) {
		this.otp = otp;
	}
	@OneToMany(mappedBy = "mainService", cascade = CascadeType.MERGE, orphanRemoval = true)
	public List<BookingPojo> getUserbook() {
		return userbook;
	}


	public void setUserbook(List<BookingPojo> userbook) {
		this.userbook = userbook;
	}


	@Override
	public String toString() {
		return "UserPojo [name=" + name + ", email=" + email + ", mobile=" + mobile + ", role=" + role + ", userloc="
				+ userloc + ", otp=" + otp + "]";
	}

}
